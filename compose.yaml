services:
  postgres:
    image: 'postgres:16.0'
    container_name: postgres
    environment:
      - 'POSTGRES_DB=book_project'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  mongodb:
    image: mongo:5.0
    container_name: mongo
    ports:
      - '27017:27017'
    healthcheck:
      test: [ "CMD", "mongo", "--quiet", "--eval", "printjson(db.adminCommand('ping'))" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - microservices-network

  consul:
    image: hashicorp/consul:1.20
    container_name: consul
    ports:
      - '8500:8500'
    command: [ "agent", "-dev", "-client", "0.0.0.0" ]
    healthcheck:
      test: [ "CMD", "curl", "-X", "GET", "localhost:8500/v1/status/leader" ]
      interval: 1s
      timeout: 3s
      retries: 60
    networks:
      - microservices-network

  config:
    build: ./config
    container_name: config
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/book_project'
    healthcheck:
      test: [ "CMD", "curl", "-X", "GET", "localhost:8081/actuator/health" ]
      interval: 1s
      timeout: 1s
      retries: 60
      start_period: 15s
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - microservices-network

  service-user:
    build: ./service-user
    container_name: service-user
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/book_project'
    depends_on:
      postgres:
        condition: service_healthy
      config:
        condition: service_healthy
    networks:
      - microservices-network

  service-statistic:
    build: ./service-statistic
    container_name: service-statistic
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/book_project'
    depends_on:
      postgres:
        condition: service_healthy
      config:
        condition: service_healthy
    networks:
      - microservices-network

  gateway:
    build: ./gateway
    container_name: gateway
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/book_project'
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - '8080:8080'
    networks:
      - microservices-network

  service-book:
    build: ./service-book
    container_name: service-book
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=root'
      - 'POSTGRES_URL=jdbc:postgresql://postgres:5432/book_project'
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - microservices-network

  service-media:
    build: ./service-media
    container_name: service-media
    environment:
      - 'CONSUL_HOST=consul'
      - 'CONSUL_PORT=8500'
    depends_on:
      config:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    ports:
      - '29092:29092'
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge